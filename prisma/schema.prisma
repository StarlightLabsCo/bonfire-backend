// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// Next Auth
// https://next-auth.js.org/
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WebSocketAuthenticationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model User {
  // User Info
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts                     Account[]
  sessions                     Session[]
  webSocketAuthenticationToken WebSocketAuthenticationToken[]

  // Payment / Monetization
  stripeCustomerId String?
  plan             UserPlan @default(FREE)

  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?

  // Core
  instances Instance[]

  // Logging / Dataset Collection
  openAIRequestLog     OpenAIRequestLog[]
  elevenLabsRequestLog ElevenLabsRequestLog[]
  replicateRequestLog  ReplicateRequestLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserPlan {
  FREE
  BASIC
}

model Instance {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  description String

  messages Message[]

  public Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  // Starlight specific
  id String @id @default(cuid())

  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String

  embedding  Unsupported("vector(1536)")?
  importance Int?
  accessedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OpenAI
  role         MessageRole
  content      String
  name         String?
  functionCall String?
}

enum MessageRole {
  system
  assistant
  function
  user
}

model OpenAIRequestLog {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  tag   String? // Starlight specific
  model String

  // ** Input **
  messages String @db.Text // Stringified JSON of the messages

  // ** Output **
  streamed Boolean @default(false)

  // ---- Non-Streamed ---
  role         MessageRole?
  content      String?      @db.Text
  name         String?
  functionCall String?

  // ---- Streamed ---
  response String? @db.Text // SSE stream

  // ---- Both ---
  responseTime Int

  promptTokens     Int
  completionTokens Int
  totalTokens      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tag])
}

model ReplicateRequestLog {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  prompt         String @db.Text
  negativePrompt String @db.Text
  width          Int
  height         Int
  scheduler      String
  refine         String

  imageURL String?

  time Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ElevenLabsRequestLog {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  requestedCharacters String
  numCharacters       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
