// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next Auth
// https://next-auth.js.org/
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WebSocketAuthenticationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime

  userId String
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts                     Account[]
  sessions                     Session[]
  webSocketAuthenticationToken WebSocketAuthenticationToken[]

  instances Instance[]

  isTester Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instance {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  description String

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MessageRole {
  system
  assistant
  function
  user
}

model Message {
  id String @id @default(cuid())

  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String

  role    MessageRole
  content String

  openAIRequestLog     OpenAIRequestLog?
  elevenLabsRequestLog ElevenLabsRequestLog?
  replicateRequestLog  ReplicateRequestLog?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpenAIRequestLog {
  id String @id @default(cuid())

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String  @unique

  functionName String

  requestUrl     String
  requestHeaders Json
  requestBody    Json

  responseHeaders Json
  responseBody    String // Needs to be string because can be JSON or SSE events
  responseTime    Int

  model            String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int

  streamed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([functionName])
}

model ReplicateRequestLog {
  id String @id @default(cuid())

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String  @unique

  prompt         String @db.Text
  negativePrompt String @db.Text
  width          Int
  height         Int
  scheduler      String
  refine         String

  imageURL String?

  time Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ElevenLabsRequestLog {
  id String @id @default(cuid())

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String  @unique

  requestedCharacters String
  numCharacters       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
